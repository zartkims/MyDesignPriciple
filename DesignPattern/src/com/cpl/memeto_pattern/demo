本次例子中展示了两种备忘录模式
第一种是比较简单的利用java自带的clone方法进行备忘,这种发方法的话适用于简单的情景,
当涉及到比较复杂的场景的是时候会导致逻辑非常复杂和维护困难!

第二种是糅合了几个特性的比较通用的备忘录模式,特性如下:
 1.可以备忘多个状态,从careTaker中的map可以看出,map的key又称作检查点
 2.可以随意的改变类的变量字段等,因为利用的是反射成map来备份,十分的方便快捷
 3.使用了窄接口(对外暴露一个空接口),提高了代码的稳定性.
 
 备忘录的使用场景有: 
 1.需要提供一个回滚的操作
 2.需要提供一个数据恢复的场景
 3.有需要监控的副本
 
 备忘录模式一些注意事项:
 1.备忘录创造了之后应该主动管理他的生命周期,在不用的时候删除,让他能被回收
 2.不要在频繁建立对象(for循环等)的时候使用备忘录模式
 ,因为可能难以控制大对象的创建数量,或者是大对象创建需要消耗大量资源,降低系统性能.